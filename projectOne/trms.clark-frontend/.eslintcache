[{"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\index.tsx":"1","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\reportWebVitals.ts":"2","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\App.tsx":"3","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\actions.ts":"4","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\routing.component.tsx":"5","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\user\\user.ts":"6","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\user\\login.component.tsx":"7","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\reducer.ts":"8","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\submittedEvents\\submittedEvent.ts":"9","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\thunks.ts":"10","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\user\\userAxiosService.ts":"11","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\textComponents\\about.component.tsx":"12","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\textComponents\\contact.component.tsx":"13","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\claim.ts":"14","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\claimDetail.component.tsx":"15","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\addClaim.component.tsx":"16","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\claimAxiosService.ts":"17","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\claim.component.tsx":"18","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\submittedEvents\\submittedEventAxiosService.ts":"19","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\submittedEvents\\submittedEvent.component.tsx":"20","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\submittedEvents\\eventDetail.component.tsx":"21","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\error.component.tsx":"22","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\textComponents\\claimAmount.component.tsx":"23","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\editClaim.component.tsx":"24"},{"size":676,"mtime":1611097695873,"results":"25","hashOfConfig":"26"},{"size":440,"mtime":1610487939102,"results":"27","hashOfConfig":"26"},{"size":1038,"mtime":1611099193195,"results":"28","hashOfConfig":"26"},{"size":2475,"mtime":1611160846014,"results":"29","hashOfConfig":"26"},{"size":4516,"mtime":1611166776886,"results":"30","hashOfConfig":"26"},{"size":1189,"mtime":1611119771768,"results":"31","hashOfConfig":"26"},{"size":1764,"mtime":1610944583431,"results":"32","hashOfConfig":"26"},{"size":2524,"mtime":1611160807701,"results":"33","hashOfConfig":"26"},{"size":1429,"mtime":1611152288095,"results":"34","hashOfConfig":"26"},{"size":771,"mtime":1611097707020,"results":"35","hashOfConfig":"26"},{"size":1266,"mtime":1611129167775,"results":"36","hashOfConfig":"26"},{"size":2985,"mtime":1611159315494,"results":"37","hashOfConfig":"26"},{"size":1110,"mtime":1611121068381,"results":"38","hashOfConfig":"26"},{"size":1016,"mtime":1611159948694,"results":"39","hashOfConfig":"26"},{"size":6302,"mtime":1611181120741,"results":"40","hashOfConfig":"26"},{"size":7489,"mtime":1611163199319,"results":"41","hashOfConfig":"26"},{"size":1227,"mtime":1610911184490,"results":"42","hashOfConfig":"26"},{"size":3231,"mtime":1611122006872,"results":"43","hashOfConfig":"26"},{"size":1120,"mtime":1610940867658,"results":"44","hashOfConfig":"26"},{"size":937,"mtime":1611122138202,"results":"45","hashOfConfig":"26"},{"size":1489,"mtime":1611121084554,"results":"46","hashOfConfig":"26"},{"size":1909,"mtime":1611075805899,"results":"47","hashOfConfig":"26"},{"size":572,"mtime":1611120998395,"results":"48","hashOfConfig":"26"},{"size":4802,"mtime":1611160856992,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"73iu5y",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\index.tsx",[],["103","104"],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\reportWebVitals.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\App.tsx",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\actions.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\routing.component.tsx",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\user\\user.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\user\\login.component.tsx",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\reducer.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\submittedEvents\\submittedEvent.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\thunks.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\user\\userAxiosService.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\textComponents\\about.component.tsx",["105"],"import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { getUser } from '../actions';\r\nimport { UserState } from '../reducer';\r\n\r\ninterface AboutProps {\r\n  data: string;\r\n}\r\n\r\nexport function AboutComponent(props: AboutProps) {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const selectUser = (state: UserState) => state.user;\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUser(user));\r\n  }, []);\r\n\r\n  function goToMakeRequest() {\r\n    history.push('/claims/addClaim');\r\n  }\r\n  return (\r\n    <div className='text-cards'>\r\n      <div className='about-card'>\r\n        <h2 className='page-header'>About</h2>\r\n        <p>{aboutHeader}</p>\r\n        <h3 className='about-header'>Rules</h3>\r\n        <p>{rules}</p>\r\n        <h3 className='about-header'>Claim Coverage Rates</h3>\r\n        <li className='claim-coverage'>\r\n          University Courses ..................................... 80%\r\n        </li>\r\n        <li className='claim-coverage'>\r\n          Seminars ........................................................ 60%\r\n        </li>\r\n        <li className='claim-coverage'>\r\n          Certification Preparation Classes ......... 75%\r\n        </li>\r\n        <li className='claim-coverage'>\r\n          Certification ............................................... 100%\r\n        </li>\r\n        <li className='claim-coverage'>\r\n          Technical Training ...................................... 90%\r\n        </li>\r\n        <li className='claim-coverage'>\r\n          Other ..............................................................\r\n          30%\r\n        </li>\r\n        <h3 className='about-header'>Formula Used for Claims</h3>\r\n        <p className='formula'>\r\n          AvailableClaim = TotalClaimAmount - PendingClaims - AwardedClaims\r\n        </p>\r\n        <p>\r\n          In normal terms, your Available Claim will be the the total claim\r\n          amount ($1000) subtracted by your Pending Claims and Approved Claims\r\n          (also known as Awarded Claims).\r\n        </p>\r\n      </div>\r\n      {user.password !== undefined && (\r\n        <button className='generic-button' onClick={goToMakeRequest}>\r\n          Make a Request\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nconst aboutHeader: string =\r\n  'Welcome to the Tuition Claim Management System (TRMS). The TRMS provides claims for university courses, seminars, certification preparation classes, certifications, and technical training. If you are not logged in, then you cannot make a request.';\r\nconst rules: string = `Each Employee is allowed to claim up to $1000 in tuition claim a year which means that the alloted claim value resets on the new year. A projected claim will be adjusted if it exceeds the available claim amount. Claims do not cover materials such as books and similar items. Use the button at the bottom of the page to submit a request.`;\r\n","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\textComponents\\contact.component.tsx",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\claim.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\claimDetail.component.tsx",["106"],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\addClaim.component.tsx",["107"],"import { SyntheticEvent, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { UserState } from '../reducer';\r\nimport claimService from './claimAxiosService';\r\nimport { changeClaim, ChangeSubmittedEvent, getUser } from '../actions';\r\nimport { Claim, ClaimKey } from './claim';\r\nimport {\r\n  eventTypeChoices,\r\n  gradingFormatChoices,\r\n  SubmittedEvent,\r\n} from '../submittedEvents/submittedEvent';\r\nimport submittedEventAxiosService from '../submittedEvents/submittedEventAxiosService';\r\nimport Select from 'react-select';\r\nimport userAxiosService from '../user/userAxiosService';\r\n\r\nexport function AddClaimComponent() {\r\n  const claimSelector = (state: UserState) => state.claim;\r\n  const claim = useSelector(claimSelector);\r\n  const user = useSelector((state: UserState) => state.user);\r\n  const eventSelector = (state: UserState) => state.submittedEvent;\r\n  const subEvent = useSelector(eventSelector);\r\n\r\n  const dispatch = useDispatch();\r\n  const CLAIM_FIELDS = [\r\n    'eventName',\r\n    'justification',\r\n    'approverLetter',\r\n    'claimAmount',\r\n  ];\r\n  const EVENT_FIELDS = [\r\n    'eventType',\r\n    'description',\r\n    'cost',\r\n    'startDate',\r\n    'gradingFormat',\r\n    'location',\r\n  ];\r\n  const history = useHistory();\r\n  // This function is going to handle my onChange event.\r\n  // SyntheticEvent is how React simulates events.\r\n  function handleClaimInput(this: any, e: SyntheticEvent, claim: Claim) {\r\n    let c: any = {\r\n      ...claim,\r\n      employee: user.username,\r\n      approver: user.supervisorName,\r\n    };\r\n    c[\r\n      (e.target as HTMLInputElement).name\r\n    ] = (e.target as HTMLInputElement).value;\r\n    dispatch(changeClaim(c));\r\n    history.push('/claims/addClaim');\r\n  }\r\n\r\n  /**\r\n   * handles the event field inputs.\r\n   * @param synthEve\r\n   * @param subEvent\r\n   */\r\n  function handleEventInput(\r\n    synthEve: SyntheticEvent,\r\n    subEvent: SubmittedEvent\r\n  ) {\r\n    let e: any = { ...subEvent, eventName: claim.eventName };\r\n    e[\r\n      (synthEve.target as HTMLInputElement).name\r\n    ] = (synthEve.target as HTMLInputElement).value;\r\n    dispatch(ChangeSubmittedEvent(e));\r\n    history.push('/claims/addClaim');\r\n  }\r\n  const handleSelectionInput = (e: any) => {\r\n    const newEvent = { ...subEvent };\r\n    if (e.value === 'gradingFormat') {\r\n      newEvent.gradingType = e.label;\r\n    } else {\r\n      newEvent.eventType = e.label;\r\n    }\r\n    dispatch(ChangeSubmittedEvent(newEvent));\r\n  };\r\n\r\n  function submitForm() {\r\n    if (user.availableAmount - claim.claimAmount >= 0) {\r\n      user.availableAmount -= claim.claimAmount;\r\n    } else {\r\n      claim.claimAmount = user.availableAmount;\r\n      user.availableAmount = 0;\r\n    }\r\n\r\n    user.claimReqs.push(new ClaimKey(user.username, claim.eventName));\r\n    claimService\r\n      .addClaim(claim)\r\n      .then(() => {\r\n        dispatch(changeClaim(claim));\r\n        console.log('submit claim: ' + JSON.stringify(claim));\r\n      })\r\n      .catch((err) => {\r\n        console.log('submitForm claim err: ' + err);\r\n      });\r\n    submittedEventAxiosService\r\n      .addSubmittedEvent(subEvent)\r\n      .then(() => {\r\n        dispatch(ChangeSubmittedEvent(subEvent));\r\n        history.push('/claims');\r\n        console.log('submit event: ' + JSON.stringify(subEvent));\r\n      })\r\n      .catch((err) => {\r\n        console.log('submitForm event err: ' + err);\r\n      });\r\n    userAxiosService\r\n      .updateUser(user)\r\n      .then(() => {\r\n        dispatch(getUser(user));\r\n        console.log('submit user: ' + JSON.stringify(user));\r\n      })\r\n      .catch((err) => {\r\n        console.log('submitForm user err: ' + err);\r\n      });\r\n  }\r\n  useEffect(() => {\r\n    dispatch(getUser(user));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className='claim-card'>\r\n      <h2>Make a Claim Form</h2>\r\n      {CLAIM_FIELDS.map((fieldName) => {\r\n        if (fieldName === 'claimAmount') {\r\n          return (\r\n            <div key={'input-field-' + fieldName}>\r\n              <label>{fieldName}</label>\r\n              <input\r\n                type='number'\r\n                className='form-control'\r\n                name={fieldName}\r\n                id={'r_' + fieldName}\r\n                value={(claim as any)[fieldName]}\r\n                onChange={(e) => {\r\n                  handleClaimInput(e, claim);\r\n                }}></input>\r\n              <p>\r\n                *Reminder it can only be a certain percentage based off the\r\n                event type.\r\n              </p>\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div key={'input-field-' + fieldName}>\r\n              <label>{fieldName}</label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                name={fieldName}\r\n                id={'r_' + fieldName}\r\n                value={(claim as any)[fieldName]}\r\n                onChange={(e) => {\r\n                  handleClaimInput(e, claim);\r\n                }}></input>\r\n            </div>\r\n          );\r\n        }\r\n      })}\r\n      {EVENT_FIELDS.map((fieldName) => {\r\n        if (fieldName === 'gradingFormat') {\r\n          return (\r\n            <>\r\n              <label>Grading Format</label>\r\n              <Select\r\n                options={gradingFormatChoices}\r\n                onChange={handleSelectionInput}\r\n              />\r\n            </>\r\n          );\r\n        } else if (fieldName === 'eventType') {\r\n          return (\r\n            <>\r\n              <label>Event Type</label>\r\n              <Select\r\n                options={eventTypeChoices}\r\n                onChange={handleSelectionInput}\r\n              />\r\n            </>\r\n          );\r\n        } else if (fieldName === 'cost') {\r\n          return (\r\n            <div key={'input-field-' + fieldName}>\r\n              <label>{fieldName}</label>\r\n              <input\r\n                type='number'\r\n                className='form-control'\r\n                name={fieldName}\r\n                id={'r_' + fieldName}\r\n                value={(subEvent as any)[fieldName]}\r\n                onChange={(e) => {\r\n                  handleEventInput(e, subEvent);\r\n                }}></input>\r\n              <p>*This is the total cost of the event.</p>\r\n            </div>\r\n          );\r\n        } else if (fieldName === 'startDate') {\r\n          return (\r\n            <div key={'input-field-' + fieldName}>\r\n              <label>{fieldName}</label>\r\n              <input\r\n                type='date'\r\n                className='form-control'\r\n                name={fieldName}\r\n                id={'r_' + fieldName}\r\n                value={(subEvent as any)[fieldName]}\r\n                onChange={(e) => {\r\n                  handleEventInput(e, subEvent);\r\n                }}></input>\r\n            </div>\r\n          );\r\n        } else {\r\n          return (\r\n            <div key={'input-field-' + fieldName}>\r\n              <label>{fieldName}</label>\r\n              <input\r\n                type='text'\r\n                className='form-control'\r\n                name={fieldName}\r\n                id={'r_' + fieldName}\r\n                value={(subEvent as any)[fieldName]}\r\n                onChange={(e) => {\r\n                  handleEventInput(e, subEvent);\r\n                }}></input>\r\n            </div>\r\n          );\r\n        }\r\n      })}\r\n      <button className='generic-button' onClick={submitForm}>\r\n        Submit Request\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\claimAxiosService.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\claim.component.tsx",["108"],"import { useHistory } from 'react-router-dom';\r\nimport React, { useEffect } from 'react';\r\n\r\nimport { Claim, claimToString } from './claim';\r\nimport { ClaimState, UserState } from '../reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { thunkGetClaims } from '../thunks';\r\n\r\ninterface ClaimProps {\r\n  data: Claim[];\r\n}\r\n\r\nexport function ClaimComponent(props: ClaimProps) {\r\n  const history = useHistory();\r\n  const selectClaim = (state: ClaimState) => state.claims;\r\n  const claims = useSelector(selectClaim);\r\n  const selectUser = (state: UserState) => state.user;\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n  function goToClaim(event: any, chosenClaim: Claim) {\r\n    history.push(`/claims/${chosenClaim.employee}-${chosenClaim.eventName}`);\r\n  }\r\n\r\n  function goToEvent(e: any, eventName: string) {\r\n    history.push(`/submittedEvents/${eventName}`);\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch(thunkGetClaims());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className='claim-card'>\r\n      <h2>Your Claims</h2>\r\n      {claims.map((claim) => {\r\n        return (\r\n          <div>\r\n            {user.username === claim.employee ? (\r\n              <>\r\n                <h5>Event Name: {claim.eventName}</h5>\r\n                <p className='info'>\r\n                  Claim Amount: {claim.claimAmount}. Current Approver:{' '}\r\n                  {claim.approver}. Justification: {claim.justification}\r\n                  <button\r\n                    className='generic-button'\r\n                    onClick={(e) => {\r\n                      goToClaim(e, claim);\r\n                    }}>\r\n                    View Claim\r\n                  </button>\r\n                  <button\r\n                    className='generic-button'\r\n                    onClick={(e) => {\r\n                      goToEvent(e, claim.eventName);\r\n                    }}>\r\n                    View Event\r\n                  </button>\r\n                </p>\r\n              </>\r\n            ) : (\r\n              <p />\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n      <h2>Claims Needing Approval</h2>\r\n      {claims.map((claim) => {\r\n        return (\r\n          <div>\r\n            {user.username === claim.approver ? (\r\n              <>\r\n                <h5>\r\n                  Event Name: {claim.eventName} - Employee: {claim.employee}\r\n                </h5>\r\n                <p className='info'>\r\n                  Claim Amount: {claim.claimAmount}. Current Approver:{' '}\r\n                  {claim.approver}. Justification: {claim.justification}\r\n                  <button\r\n                    className='generic-button'\r\n                    onClick={(e) => {\r\n                      goToClaim(e, claim);\r\n                    }}>\r\n                    View Claim\r\n                  </button>\r\n                  <button\r\n                    className='generic-button'\r\n                    onClick={(e) => {\r\n                      goToEvent(e, claim.eventName);\r\n                    }}>\r\n                    View Event\r\n                  </button>\r\n                </p>\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\submittedEvents\\submittedEventAxiosService.ts",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\submittedEvents\\submittedEvent.component.tsx",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\submittedEvents\\eventDetail.component.tsx",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\error.component.tsx",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\textComponents\\claimAmount.component.tsx",[],"D:\\git\\2012-dec14-react\\projectOne\\trms.clark-frontend\\src\\claims\\editClaim.component.tsx",["109","110","111","112","113"],"import { SyntheticEvent, useEffect } from 'react';\r\nimport claimService from './claimAxiosService';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { ClaimState, UserState } from '../reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeClaim, changeClaimee, getUser } from '../actions';\r\nimport { Claim } from './claim';\r\nimport userAxiosService from '../user/userAxiosService';\r\nimport { User } from '../user/user';\r\n\r\ninterface EditProps {\r\n  id: string;\r\n}\r\n\r\nexport function EditClaimComponent(props: EditProps) {\r\n  const history = useHistory();\r\n  const selectClaim = (state: ClaimState) => state.claim;\r\n  const claim = useSelector(selectClaim);\r\n  const selectUser = (state: UserState) => state.user;\r\n  const user = useSelector(selectUser);\r\n  const selectClaimee = (state: UserState) => state.claimee;\r\n  const claimee = useSelector(selectClaimee);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    claimService.getClaim(claim.employee, claim.eventName).then((claim) => {\r\n      dispatch(changeClaim(claim));\r\n      userAxiosService.getUser(claim.employee).then((receivedUser) => {\r\n        dispatch(changeClaimee(claimee));\r\n        console.log('Claimee' + JSON.stringify(claimee));\r\n\r\n        if (receivedUser && receivedUser.availableAmount) {\r\n          receivedUser.availableAmount += claim.claimAmount;\r\n        }\r\n      });\r\n      console.log('pre submit: ' + user.availableAmount);\r\n    });\r\n  }, [dispatch]);\r\n  const FIELDS = ['claimAmount', 'approver', 'justification'];\r\n\r\n  function handleFormInput(e: SyntheticEvent) {\r\n    let r: any = { ...claim };\r\n    r[\r\n      (e.target as HTMLInputElement).name\r\n    ] = (e.target as HTMLInputElement).value;\r\n    dispatch(changeClaim(r));\r\n  }\r\n  function submitForm() {\r\n    if (user.role === 'Employee') {\r\n      claim.approver = user.supervisorName;\r\n    }\r\n    console.log('claimee submit: ' + JSON.stringify(claimee));\r\n\r\n    console.log('post submit pre change: ' + claimee.availableAmount);\r\n\r\n    if (claimee.availableAmount - claim.claimAmount >= 0) {\r\n      claimee.availableAmount -= claim.claimAmount;\r\n      console.log('post submit post change sub: ' + claimee.availableAmount);\r\n    } else {\r\n      claim.claimAmount = claimee.availableAmount;\r\n      claimee.availableAmount = 0;\r\n      console.log('post submit post change set 0: ' + claimee.availableAmount);\r\n    }\r\n    claimService.updateClaim(claim).then(() => {\r\n      dispatch(changeClaim(claim));\r\n      console.log('Updating claim!');\r\n      history.push('/claims');\r\n    });\r\n    userAxiosService\r\n      .updateUser(claimee)\r\n      .then(() => {\r\n        dispatch(getUser(claimee));\r\n        console.log('submit user: ' + JSON.stringify(user));\r\n      })\r\n      .catch((err) => {\r\n        console.log('submitForm user err: ' + err);\r\n      });\r\n  }\r\n  return (\r\n    <div className='col claim card'>\r\n      <h5>Event Name: {claim.eventName}</h5>\r\n      <p className='info'>\r\n        Claim Amount: {claim.claimAmount}. Employee: {claim.employee}.\r\n        Justification: {claim.justification}\r\n      </p>\r\n      {FIELDS.map((fieldName) => {\r\n        {\r\n          if (fieldName === 'claimAmount') {\r\n            return (\r\n              <div>\r\n                <label>{fieldName}</label>\r\n                <input\r\n                  type='number'\r\n                  className='form-control'\r\n                  name={fieldName}\r\n                  id={'r_' + fieldName}\r\n                  value={(claim as any)[fieldName]}\r\n                  onChange={handleFormInput}></input>\r\n              </div>\r\n            );\r\n          } else if (fieldName === 'approver') {\r\n            if (user.role !== 'Employee') {\r\n              return (\r\n                <div key={'input-field-' + fieldName}>\r\n                  <label>{fieldName}</label>\r\n                  <input\r\n                    type='text'\r\n                    className='form-control'\r\n                    name={fieldName}\r\n                    id={'r_' + fieldName}\r\n                    value={(claim as any)[fieldName]}\r\n                    onChange={handleFormInput}></input>\r\n                </div>\r\n              );\r\n            }\r\n          } else {\r\n            return (\r\n              <div key={'input-field-' + fieldName}>\r\n                <label>{fieldName}</label>\r\n                <input\r\n                  type='text'\r\n                  className='form-control'\r\n                  name={fieldName}\r\n                  id={'r_' + fieldName}\r\n                  value={(claim as any)[fieldName]}\r\n                  onChange={handleFormInput}></input>\r\n              </div>\r\n            );\r\n          }\r\n        }\r\n      })}\r\n      <button className='btn btn-primary' onClick={submitForm}>\r\n        Submit Edited Claim\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":19,"column":6,"nodeType":"120","endLine":19,"endColumn":8,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":61,"column":6,"nodeType":"120","endLine":61,"endColumn":8,"suggestions":"123"},{"ruleId":"118","severity":1,"message":"124","line":121,"column":6,"nodeType":"120","endLine":121,"endColumn":16,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":4,"column":17,"nodeType":"128","messageId":"129","endLine":4,"endColumn":30},{"ruleId":"126","severity":1,"message":"130","line":7,"column":10,"nodeType":"128","messageId":"129","endLine":7,"endColumn":15},{"ruleId":"126","severity":1,"message":"131","line":9,"column":10,"nodeType":"128","messageId":"129","endLine":9,"endColumn":14},{"ruleId":"118","severity":1,"message":"132","line":37,"column":6,"nodeType":"120","endLine":37,"endColumn":16,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":85,"column":31,"nodeType":"136","messageId":"137","endLine":85,"endColumn":33},{"ruleId":"138","severity":1,"message":"139","line":86,"column":9,"nodeType":"140","messageId":"141","endLine":129,"endColumn":10},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has missing dependencies: 'claim.employee', 'claimee', 'dispatch', 'keyArr', and 'user'. Either include them or remove the dependency array.",["145"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["146"],"@typescript-eslint/no-unused-vars","'claimToString' is defined but never used.","Identifier","unusedVar","'Claim' is defined but never used.","'User' is defined but never used.","React Hook useEffect has missing dependencies: 'claim.employee', 'claim.eventName', 'claimee', and 'user.availableAmount'. Either include them or remove the dependency array.",["147"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"148","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [dispatch, user]",{"range":"155","text":"156"},"Update the dependencies array to be: [claim.employee, claimee, dispatch, keyArr, user]",{"range":"157","text":"158"},{"range":"159","text":"156"},"Update the dependencies array to be: [claim.employee, claim.eventName, claimee, dispatch, user.availableAmount]",{"range":"160","text":"161"},[545,547],"[dispatch, user]",[2024,2026],"[claim.employee, claimee, dispatch, keyArr, user]",[3767,3777],[1464,1474],"[claim.employee, claim.eventName, claimee, dispatch, user.availableAmount]"]